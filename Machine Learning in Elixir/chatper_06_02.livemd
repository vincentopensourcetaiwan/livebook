# Machine Learning in Elixir Chapter 06 - 02

```elixir
# setup library to use
Mix.install([
  {:axon, "~> 0.5"},
  {:nx, "~> 0.5"},
  {:exla, "~> 0.5"},
  {:scidata, "~> 0.1"},
  {:kino, "~> 0.8"},
  {:table_rex, "~> 3.1.1"}
])
```

## Section

```elixir
# setup default backend compiler

Nx.default_backend(EXLA.Backend)
```

```elixir
# download dataset 

{images, labels} = Scidata.MNIST.download()
```

```elixir
# convert the data to NX tensor

{image_data, image_type, image_shape} = images
{label_data, label_type, label_shape} = labels

images =
  image_data
  |> Nx.from_binary(image_type)
  |> Nx.divide(255)
  |> Nx.reshape({60000, :auto})

labels =
  label_data
  |> Nx.from_binary(label_type)
  |> Nx.reshape(label_shape)
  |> Nx.new_axis(-1)
  |> Nx.equal(Nx.iota({1, 10}))
```

```elixir
# seperate the dataset to trining dataset and test dataset

train_range = 0..49_999//1
test_range = 50_000..-1//1

train_images = images[train_range]
train_labels = labels[train_range]

test_images = images[test_range]
test_labels = labels[test_range]
```

```elixir
# seperate dataset into batch

batch_size = 64

train_data =
  train_images
  |> Nx.to_batched(batch_size)
  |> Stream.zip(Nx.to_batched(train_labels, batch_size))

test_data =
  test_images
  |> Nx.to_batched(batch_size)
  |> Stream.zip(Nx.to_batched(test_labels, batch_size))
```

```elixir
# define model

model =
  Axon.input("images", shape: {nil, 784})
  |> Axon.dense(128, activation: :relu)
  |> Axon.dense(10, activation: :softmax)
```

```elixir
# visualize the model

template = Nx.template({1, 784}, :f32)
Axon.Display.as_graph(model, template)
```

```elixir
# display the model as a table

# Axon.Display.as_table(model, template)
# |>IO.puts
```

```elixir
# inspect the model

IO.inspect model, structs: false
```

```elixir
# training the model

trained_model_state =
  model
  |> Axon.Loop.trainer(:categorical_cross_entropy, :sgd)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(train_data, %{}, epochs: 10, compiler: EXLA)
```

```elixir
# evaluate the model with test data

model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(test_data, trained_model_state, compiler: EXLA)
```

```elixir
# get first batch of test data

{test_batch, _} = Enum.at(test_data, 0)
```

```elixir
# get the first image of test data

test_image = test_batch[9]
```

```elixir
# visualize the image

test_image
|> Nx.reshape({28, 28})
|> Nx.to_heatmap()
```

```elixir
# build the model

{_, predict_fn} = Axon.build(model, compiler: EXLA)
# predict_fn.(trained_model_state, test_image)
```

```elixir
# use the model to predict

probabilities =
  test_image
  |> Nx.new_axis(0)
  |> then(&predict_fn.(trained_model_state, &1))
```

```elixir
# see the prediction result

probabilities |> Nx.argmax()
```
