<!-- livebook:{"app_settings":{"show_source":true,"slug":"ai-chapter-01","zero_downtime":true},"deployment_group_id":"84","hub_id":"team-vincent-elixir"} -->

# Machine Learning in Elixir Chapter 01

```elixir
Mix.install([
  {:axon, "~> 0.5"},
  {:nx, "~> 0.5"},
  {:explorer, "~> 0.5"},
  {:kino, "~> 0.8"}
])
```

## An overview of Machine Learning in Elixir

```
axon: neural network 
nx: data format for axon
explorer: to operate data
kino: livebook UI
```

```elixir
# to use explorer
require Explorer.DataFrame, as: DF

# download data
iris = Explorer.Datasets.iris()
```

```elixir
# normalize data
# convert raw data to nx format

cols = ~w(sepal_width sepal_length petal_length petal_width)

normalized_iris =
  DF.mutate(
    iris,
    for col <- across(^cols) do
      {col.name, col - mean(col) / standard_deviation(col)}
    end
  )
```

```elixir
# define species column as a variable, which name is 'category'
# this is to use as an nx variable 

normalized_iris = DF.mutate(normalized_iris, species: Explorer.Series.cast(species, :category))
```

```elixir
# shuffle the data to make it more like real world data

shuffled_normalized_iris = DF.shuffle(normalized_iris)
```

```elixir
# splite data into two sets
# one for training
# one for testing

train_df = DF.slice(shuffled_normalized_iris, 0..119)
test_df = DF.slice(shuffled_normalized_iris, 120..149)
```

```elixir
# convert the data to nx format
feature_columns = ["sepal_length", "sepal_width", "petal_length", "petal_width"]

# x_train is feature
# y_train is target (result)
x_train = Nx.stack(train_df[feature_columns], axis: -1)
y_train = train_df["species"] |> Nx.stack(axis: -1) |> Nx.equal(Nx.iota({1, 3}, axis: -1))

# x_test is feature
# y_test is target (result)
x_test = Nx.stack(test_df[feature_columns], axis: -1)
y_test = test_df["species"] |> Nx.stack(axis: -1) |> Nx.equal(Nx.iota({1, 3}, axis: -1))
```

```elixir
# define an AI model

model =
  Axon.input("iris_features", shape: {nil, 4})
  |> Axon.dense(3, activation: :softmax)
```

```elixir
# visualize the AI model

Axon.Display.as_graph(model, Nx.template({1, 4}, :f32))
```

```elixir
# make the data into a batch format
# every row is in following format
# {features, targets}

data_stream = Stream.repeatedly(fn ->
  {x_train, y_train}
end)
```

```elixir
# training the model

trained_model_state =
  model
  |> Axon.Loop.trainer(:categorical_cross_entropy, :sgd)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(data_stream, %{}, iterations: 500, epochs: 10)
```

```elixir
# evaluating the model

data = [{x_test, y_test}]
model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(data, trained_model_state)
```

<!-- livebook:{"offset":2695,"stamp":{"token":"XCP.s0w51el_c83RW2u7PYbDK9PMvFXSoXBeIZnqk8xCJvYd9wYW7XkY5eEEaGoIcofMaCnJBA6TVZHh79Xij7uekRX4RT7vlu8QeazmRQclN-6tBh_7TJMWRWRF","token_signature":"Yh11GmDLpWdcwjh43Da7ug-F_rQ-4HUz8YiqjEEB-Z8eOcy7b_KxyH5czpdtXLRmxcFkrsz98nPpjdlxt0SShIsXmEFhVfcP4mmV-ZixnDsAPUZMMNDgOirRVBPhI2bd1PlWvKK9UsG56gpUtxzGWzmzZJQM_JYLedza1_m6zk0k9waKcdBekIsZHdjsXT1M_lp84jfaKBABw4wQZDQf58KpIcG3qXhKjl2blO2NLTdUYa-FOtWFV0FPFJ2dOPrkwJqVCTMY42zrD850mBXLSD49JSVkYUTETEqFQCHRXUjdzriRrXazyVinD2DGqtRdN4kDLHmMW5WIH8Y5hCmanQ","version":1}} -->
