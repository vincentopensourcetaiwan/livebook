# chapter 08

```elixir
Mix.install([
  {:axon_onnx, "~> 0.4.0"},
  {:axon, "~> 0.5.0"},
  {:nx, "~> 0.5.0"},
  {:exla, "~> 0.5"},
  {:stb_image, "~> 0.6"},
  {:kino, "~> 0.8"}
])
```

## Section

```elixir
Nx.global_default_backend(EXLA.Backend)
```

```elixir
defmodule CatsAndDogs do
  def pipeline(paths, batch_size, _target_height, _target_width) do
    paths
    |> Enum.shuffle()
    |> Task.async_stream(&parse_image/1)
    |> Stream.filter(fn
      {:ok, {:ok, {%StbImage{shape: {_, _, 3}}, _}}} -> true
      _ -> false
    end)
    |> Stream.map(fn {:ok, {:ok, image_data}} -> image_data end)
    |> Stream.map(&to_tensors/1)
    |> Stream.chunk_every(batch_size, batch_size, :discard)
    |> Stream.map(fn chunks ->
      {img_chunk, label_chunk} = Enum.unzip(chunks)
      {Nx.stack(img_chunk), Nx.stack(label_chunk)}
    end)
  end

  def pipeline_with_augmentations(paths, batch_size, _target_height, _target_width) do
    paths
    |> Enum.shuffle()
    |> Task.async_stream(&parse_image/1)
    |> Stream.filter(fn
      {:ok, {:ok, {%StbImage{shape: {_, _, 3}}, _}}} -> true
      _ -> false
    end)
    |> Stream.map(fn {:ok, {:ok, image_data}} -> image_data end)
    |> Stream.map(&to_tensors/1)
    |> Stream.map(&random_flip(&1, :height))
    |> Stream.map(&random_flip(&1, :width))
    |> Stream.chunk_every(batch_size, batch_size, :discard)
    |> Stream.map(fn chunks ->
      {img_chunk, label_chunk} = Enum.unzip(chunks)
      {Nx.stack(img_chunk), Nx.stack(label_chunk)}
    end)
  end

  defp random_flip({image, label}, axis) do
    if :rand.uniform() < 0.5 do
      {Nx.reverse(image, axes: [axis]), label}
    else
      {image, label}
    end
  end

  defp parse_image(path) do
    label = if String.contains?(path, "cat"), do: 0, else: 1
    case StbImage.read_file(path) do
      {:ok, img} -> 
        case img.shape do
          {_, _, 3} -> {:ok, {img, label}}
          _ -> {:error, :invalid_shape}
        end
      error -> error
    end
  end
  
  defp to_tensors({img, label}) do
    img_tensor =
      img
      |> StbImage.resize(224, 224)
      |> StbImage.to_nx()
      |> Nx.divide(255)
      |> Nx.transpose(axes: [:channels, :height, :width])
    
    {img_tensor, Nx.tensor([label])}
  end
end
```

```elixir
{test_paths, train_paths} = 
  Path.wildcard("/Users/vincentlin/projects/livebook/Machine Learning in Elixir/train/*.jpg")
  |> Enum.shuffle()
  |> Enum.split(1000)

{test_paths, val_paths} = test_paths |> Enum.split(750)

batch_size = 32
target_height = 160
target_width = 160

train_pipeline = CatsAndDogs.pipeline_with_augmentations(
  train_paths,
  batch_size,
  target_height,
  target_width
)

val_pipeline = CatsAndDogs.pipeline(
  val_paths,
  batch_size,
  target_height,
  target_width
)

test_pipeline = CatsAndDogs.pipeline(
  test_paths,
  batch_size,
  target_height,
  target_width
)

Enum.take(train_pipeline, 1)
```

```elixir
{cnn_base, cnn_base_params} = AxonOnnx.import("/Users/vincentlin/projects/livebook/Machine Learning in Elixir/mobilenetv2-7.onnx", batch_size: batch_size)
```

```elixir
input_template = Nx.template({1, 3, target_height, target_width}, :f32)
Axon.Display.as_graph(cnn_base, input_template)
```

```elixir
{_popped, cnn_base} = cnn_base |> Axon.pop_node()
{_popped, cnn_base} = cnn_base |> Axon.pop_node()
```

```elixir
Axon.Display.as_graph(cnn_base, input_template)
```

```elixir
cnn_base = cnn_base |> Axon.namespace("feature_extractor")
```

```elixir
cnn_base = cnn_base |> Axon.freeze()
```

```elixir
model =
  cnn_base
  |> Axon.global_avg_pool(channels: :first)
  |> Axon.dropout(rate: 0.2)
  |> Axon.dense(1)
```

```elixir
# Specify the batch size when importing the model
{cnn_base, cnn_base_params} = AxonOnnx.import(
  "/Users/vincentlin/projects/livebook/Machine Learning in Elixir/mobilenetv2-7.onnx",
  batch_size: batch_size
)

# Remove the last two layers
{_popped, cnn_base} = Axon.pop_node(cnn_base)
{_popped, cnn_base} = Axon.pop_node(cnn_base)

# Build the complete model
model =
  cnn_base
  |> Axon.namespace("feature_extractor")
  |> Axon.freeze()
  |> Axon.global_avg_pool(channels: :first)
  |> Axon.dropout(rate: 0.2)
  |> Axon.dense(1)
```

```elixir
# Let's test the pipeline again
defmodule PipelineDebug do
  def test_pipeline_output(paths, batch_size) do
    IO.puts("\nTesting pipeline with #{length(paths)} paths...")
    
    pipeline = CatsAndDogs.pipeline_with_augmentations(paths, batch_size, nil, nil)
    
    IO.puts("Taking first 2 batches...")
    case Enum.take(pipeline, 2) do
      [] -> 
        IO.puts("Pipeline is empty!")
      batches -> 
        IO.puts("Got #{length(batches)} batches")
        {images, labels} = hd(batches)
        IO.puts("First batch shapes:")
        IO.puts("Images: #{inspect(Nx.shape(images))}")
        IO.puts("Labels: #{inspect(Nx.shape(labels))}")
    end
  end
end

# Test the pipeline
batch_size = 32
test_paths = Path.wildcard("/Users/vincentlin/projects/livebook/Machine Learning in Elixir/train/*.jpg")
PipelineDebug.test_pipeline_output(test_paths, batch_size)
```

```elixir
loss = &Axon.Losses.binary_cross_entropy(&1, &2,
  reduction: :mean,
  from_logits: true
)
optimizer = Axon.Optimizers.adam(1.0e-4)
trained_model_state =
  model
  |> Axon.Loop.trainer(loss, optimizer)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.validate(model, val_pipeline)
  |> Axon.Loop.early_stop("validation_loss", mode: :min, patience: 5)
  |> Axon.Loop.run(
    train_pipeline,
    %{"feature_extractor" => cnn_base_params},
    epochs: 100,
    compiler: EXLA
  )
```

```elixir
eval_model = model |> Axon.sigmoid()

eval_model
  |> Axon.Loop.evaluator()
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(test_pipeline, trained_model_state, compiler: EXLA)
```

```elixir
model = model |> Axon.unfreeze(up: 50)
```

```elixir
loss = &Axon.Losses.binary_cross_entropy(&1, &2,
    reduction: :mean,
    from_logits: true
)
optimizer = Axon.Optimizers.rmsprop(1.0e-5)

trained_model_state =
    model
    |> Axon.Loop.trainer(loss, optimizer)
    |> Axon.Loop.metric(:accuracy)
    |> Axon.Loop.validate(model, val_pipeline)
    |> Axon.Loop.early_stop("validation_loss", mode: :min, patience: 5)
    |> Axon.Loop.run(
        train_pipeline,
        trained_model_state,
        epochs: 100,
        compiler: EXLA
    )
```

```elixir
eval_model = model |> Axon.sigmoid()

eval_model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(test_pipeline, trained_model_state, compiler: EXLA)
```

```elixir
defmodule Predict do
  def predict_image(model_state, path) do
    # Create model architecture
    {base_model, _} = AxonOnnx.import("/Users/vincentlin/projects/livebook/Machine Learning in Elixir/mobilenetv2-7.onnx", batch_size: 1)
    {_popped, base_model} = Axon.pop_node(base_model)
    {_popped, base_model} = Axon.pop_node(base_model)
    
    model = 
      base_model
      |> Axon.namespace("feature_extractor")
      |> Axon.freeze()
      |> Axon.global_avg_pool(channels: :first)
      |> Axon.dropout(rate: 0.2)
      |> Axon.dense(1)

    # Process single image
    case StbImage.read_file(path) do
      {:ok, img} ->
        # Convert to tensor using same preprocessing as training
        img_tensor =
          img
          |> StbImage.resize(224, 224)
          |> StbImage.to_nx()
          |> Nx.divide(255)
          |> Nx.transpose(axes: [:channels, :height, :width])
          |> Nx.new_axis(0)  # Add batch dimension
        
        # Get prediction
        prediction = Axon.predict(model, model_state, img_tensor)
        
        # Get probabilities and handle tensor shape
        probs = Nx.sigmoid(prediction)
        confidence = probs[0][0] |> Nx.to_number()
        
        # Get predicted class
        class = if confidence > 0.5, do: "Dog", else: "Cat"
        final_confidence = max(confidence, 1 - confidence)
        
        # Extract true class from filename
        true_class = if String.contains?(path, "cat"), do: "Cat", else: "Dog"
        
        IO.puts("\nPrediction for #{Path.basename(path)}:")
        IO.puts("True class: #{true_class}")
        IO.puts("Predicted: #{class}")
        IO.puts("Confidence: #{Float.round(final_confidence * 100, 2)}%")
        IO.puts("Correct? #{class == true_class}")
      
      error ->
        IO.puts("Error reading image #{path}: #{inspect(error)}")
    end
  end
end

# Test on a few images
test_paths = Path.wildcard("/Users/vincentlin/projects/livebook/Machine Learning in Elixir/train/*.jpg")
# Take a random sample of 5 images
test_images = test_paths |> Enum.shuffle() |> Enum.take(5)

# Make predictions
Enum.each(test_images, &Predict.predict_image(trained_model_state, &1))
```
