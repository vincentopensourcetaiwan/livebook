# Machine Learning in Elixir Chapter 06 - 01

```elixir
# use nx 

Mix.install([
  {:nx, "~> 0.5"}
])
```

## boilerplate neural network

```elixir
# define a neural network module

defmodule NeuralNetwork do
  import Nx.Defn

  defn dense(input, weight, bias) do
    input
    |> Nx.dot(weight)
    |> Nx.add(bias)
  end

  defn activation(input) do
    Nx.sigmoid(input)
  end

  defn hidden(input, weight, bias) do
    input
    |> dense(weight, bias)
    |> activation()
  end

  defn output(input, weight, bias) do
    input
    |> dense(weight, bias)
    |> activation()
  end

  defn predict(input, w1, b1, w2, b2) do
    input
    |> hidden(w1, b1)
    |> output(w2, b2)
  end
end
```

```elixir
# generate data

key = Nx.Random.key(42)
{w1, new_key} = Nx.Random.uniform(key)
{b1, new_key} = Nx.Random.uniform(new_key)
{w2, new_key} = Nx.Random.uniform(new_key)
{b2, new_key} = Nx.Random.uniform(new_key)
```

```elixir
# make a prediction

Nx.Random.uniform_split(new_key, 0, 1, shape: {})
|> NeuralNetwork.predict(w1, b1, w2, b2)
```
